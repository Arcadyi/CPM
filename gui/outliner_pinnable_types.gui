types pinnable_outliner_items {
	type commander_item = pinnable_expandable_outliner_entry {
		datacontext = "[OutlinerEntry.AccessScope.AccessCharacter]"

		icon = {
			visible = "[Character.IsBeingHighlighted]"
			using = highlighted_square_selection
		}

		blockoverride "text" {
			text = "[Character.GetFullNameNoFormatting]"
			autoresize = yes
			minimumsize = { 130 -1 }
			maximumsize = { 130 -1 }
			margin_right = 2
		}
		blockoverride "tooltip" {
			tooltipwidget = {
				FancyTooltip_Character = {}
			}
		}
		blockoverride "onclick" {
			onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
		}

		blockoverride "onhover" {
			onmousehierarchyenter = "[AccessHighlightManager.HighlightCharacter( Character.Self )]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}

		blockoverride "icon" {
			flowcontainer = {
				character_portrait_mini = {}

				icon = {
					size = { 25 25 }
					visible = "[Or(Character.IsAdmiral, Character.IsGeneral)]"
					texture = "[Character.GetCommanderOrder.GetType.GetTexture]"
					tooltip = "[Character.GetSwitchOrderButtonDesc( Character.GetCommanderOrder.GetType.Self )]"
				}
				widget = {
					size = { 2 2 }
				}
				icon = {
					size = { 25 25 }
					texture = "[Character.GetCommanderRank.GetTexture]"
					datacontext = "[Character.GetCommanderRank]"
					using = tooltip_above
					tooltip = FancyTooltip_CommanderRank
					parentanchor = vcenter
				}
				widget = {
					size = { 2 2 }
				}
			}
		}

		blockoverride "additional_info" {
			textbox = {
				visible = "[Character.IsGeneral]"
				tooltip = "MILITARY_PANEL_COMMAND_LIMIT_BREAKDOWN_TOOLTIP"
				text = "@battalions!#variable [Character.GetNumCombatUnits]#!"
				autoresize = yes
				margin_right = 10
				minimumsize = { 50 -1 }
				maximumsize = { 50 -1 }
				align = left|nobaseline
				parentanchor = vcenter
			}

			textbox = {
				visible = "[Character.IsAdmiral]"
				tooltip = "MILITARY_PANEL_COMMAND_LIMIT_BREAKDOWN_TOOLTIP"
				text = "@flotillas!#variable [Character.GetNumCombatUnits]#!"
				autoresize = yes
				margin_right = 10
				minimumsize = { 50 -1 }
				maximumsize = { 50 -1 }
				align = left|nobaseline
				parentanchor = vcenter
			}
			
			textbox = {
				autoresize = yes
				minimumsize = { 115 -1 }
				maximumsize = { 115 -1 }
				text = "[Character.GetHomeHQ.GetNameNoFlag]"
				align = right|nobaseline
				parentanchor = vcenter
				elide = right
			}
		}
	}

	type outliner_commanders = pinnable_outliner_group {
		datacontext = "[Outliner.AccessCategory('commanders')]"
		
		blockoverride "entry_size" {
			size = { 410 30 }
		}

		blockoverride "item" {
			pinnable_outliner_group = {
				blockoverride "entry_size" {
					size = { 410 30 }
				}
				blockoverride "item" {
					pinnable_outliner_group = {
						blockoverride "entry_size" {
							size = { 410 30 }
						}
						blockoverride "title" {
							commander_item = {
								blockoverride "text_size" {
									minimumsize = { 145 -1 }
									maximumsize = { 145 -1 }
								}
							}
						}
						blockoverride "item" {
							blockoverride "text_size" {
								minimumsize = { 145 -1 }
								maximumsize = { 145 -1 }
							}

							outliner_entry = { }
						}
					}
				}
			}
		}
	}

	type interest_group_item = pinnable_outliner_entry {
		datacontext = "[OutlinerEntry.AccessScope.AccessInterestGroup]"

		blockoverride "text" {
			text = "[InterestGroup.GetNameNoFormatting]"
			minimumsize = { 145 -1 }
			maximumsize = { 145 -1 }
			autoresize = yes
			parentanchor = vcenter
		}

		tooltipwidget = {
			FancyTooltip_IG = {}
		}

		blockoverride "icon" {
			character_portrait_mini = {
			datacontext = "[InterestGroup.AccessLeader]"
						using = tooltip_above
						blockoverride "show_hat" {}
						parentanchor = vcenter
						blockoverride "highlight" {}
									}
			flowcontainer = {
				spacing = 5
				margin_right = 5
				ig_icon = {
					size = { 30 30 }
				}
			}
		}

		blockoverride "in_government_icon" {}

		blockoverride "additional_info" {
			block "in_government" {
				icon = {
					texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
					size = { 23 23 }
					visible = "[InterestGroup.IsInGovernment]"
					tooltip = IN_GOVERNMENT_DESC
					parentanchor = vcenter
				}

				icon = {
					texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
					size = { 23 23 }
					visible = "[Not(InterestGroup.IsInGovernment)]"
					tooltip = IN_OPPOSITION_DESC
					parentanchor = vcenter
				}
				icon = {
					texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
					size = { 23 23 }
					visible = "[InterestGroup.IsMarginal]"
					parentanchor = vcenter
				}
			}

			fixedgridbox = {
				flipdirection = yes
				datamodel = "[InterestGroup.AccessTraits]"
				addcolumn = 19
				addrow = 23
				parentanchor = vcenter
				visible = "[Not(InterestGroup.IsMarginal)]"

				item = {
					widget = {
						size = { 19 23 }
						icon = {
							parentanchor = center
							texture = "[InterestGroupTrait.GetTexture]"
							enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
							using = tooltip_above
							size = { 17 23 }
							alpha = "[TransparentIfFalse(InterestGroupTrait.IsEnabled(InterestGroup.Self))]"
							
							tooltipwidget = {
								FancyTooltip_InterestGroupTrait = {
									blockoverride "icon" {
										icon = {
											texture = "[InterestGroupTrait.GetTexture]"
											enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
											size = { 33 45 }
											parentanchor = center
										}
									}
								}
							}
						}
					}
				}
			}
			fixedgridbox = {
				flipdirection = yes
				datamodel = "[InterestGroup.AccessTraits]"
				addcolumn = 27
				addrow = 23
				visible = "[InterestGroup.IsMarginal]"
			}
			flowcontainer = {
			parentanchor = vcenter
			
				textbox = {
					minimumsize = { 25 -1 }
					autoresize = yes
					text = "[InterestGroup.GetApprovalValue|=+]"		
					align = right|nobaseline
					tooltip = "IG_APPROVAL_BREAKDOWN"
				}

				textbox = {
					autoresize = yes
					text = "[InterestGroup.GetClout|%1v]"
					minimumsize = { 55 -1 }
					#parentanchor = right
					align = right|nobaseline
					using = clout_tooltip_with_graph
				}
			}
		}
		blockoverride "onclick" {
			onclick = "[InformationPanelBar.OpenInterestGroupPanel( InterestGroup.AccessSelf )]"
			onrightclick = "[RightClickMenuManager.ShowForIG(InterestGroup.AccessSelf)]"
		}
	}

	type outliner_interest_groups = pinnable_outliner_group {
		datacontext = "[Outliner.AccessCategory('interest_groups')]"
		
		blockoverride "entry_size" {
			size = { 410 30 }
		}

		blockoverride "item" {
			blockoverride "entry_size" {
				size = { 410 30 }
			}
			container = {
				block "visibility" {
					visible = yes
				}
				
				container = {
					visible = "[Not(OutlinerEntry.IsCategory)]"
					interest_group_item = {
						blockoverride "text_size" {
							minimumsize = { 125 -1 }
							maximumsize = { 125 -1 }
						}
					}
				}
				pinnable_outliner_group = {
					visible = "[And(OutlinerEntry.IsCategory, OutlinerEntry.IsShown)]"
					blockoverride "entry_size" {
						size = { 410 30 }
					}
					blockoverride "item" {
						blockoverride "entry_size" {
							size = { 410 30 }
						}
						
						interest_group_item = {

							blockoverride "text_size" {
								minimumsize = { 237 -1 }
								maximumsize = { 237 -1 }
								margin_left = 5
							}

							blockoverride "in_government" {}
						}
					}
				}
			}
		}
	}



###MARKET BY AGAMI - start

	type market_item = container {
		allow_outside = yes
		datacontext = "[OutlinerEntry.AccessScope.AccessMarket]"
		outliner_entry = {

			blockoverride "text" {
			}
			
			blockoverride "text_size" {
			}
			
			blockoverride "tooltip" {
				tooltipwidget = {
					FancyTooltip_Market = { }
				}
			}

			blockoverride  "onrightclick" {
				onrightclick = "[RightClickMenuManager.ShowForMarket(Market.AccessSelf)]"
			}
			
			blockoverride "entry_size" {
				size = { 350 60 }
			}

			blockoverride "additional_info" {

				flowcontainer = {
					direction = vertical


					flowcontainer = {
						spacing = 5
						direction = vertical

						widget = {
							size = { 330 25 }
							scissor = yes

							flowcontainer = {
								righttoleft = yes
								spacing = 8
								datamodel = "[Market.AccessGoodsSortedByBalance]"

								item = {
									button = {
										size = { 75 23 }

										flowcontainer = {
											spacing = 0

											icon = {
												size = { 23 23 }
												texture = "[Goods.GetTexture]"
											}

											textbox = {
												autoresize = yes
												minimumsize = {38 -1}
												maximumsize = {38 -1}
												align = right
												raw_text = "#blue [Goods.GetMarketBuyAndSellOrdersBalance|0=*]"
												margin_right = 2
											}

											textbox = {
												autoresize = yes
												scale = 0.9
												align = vcenter
												#raw_text = "[Goods.GetMarketPrice|0]"
												text = "[Goods.GetCompareIconAgainstBasePrice( Goods.GetMarketPrice )]"
											}
										}

										onclick = "[InformationPanelBar.OpenGoodsPanel( Market.Self, Goods.Self )]"
										onrightclick = "[RightClickMenuManager.ShowForGoods( Goods.AccessSelf )]"

										tooltipwidget = {
											FancyTooltip_Goods = { }
										}
									}
								}
							}
						}

						widget = {
							size = { 330 25 }
							scissor = yes

							flowcontainer = {
								spacing = 8
								datamodel = "[Market.AccessGoodsSortedByBalance]"

								item = {
									button = {
										size = { 75 23 }

										flowcontainer = {
											spacing = 0

											icon = {
												size = { 23 23 }
												texture = "[Goods.GetTexture]"
											}

											textbox = {
												autoresize = yes
												minimumsize = {38 -1}
												maximumsize = {38 -1}
												align = right
												raw_text = "#gold [Goods.GetMarketBuyAndSellOrdersBalance|0=*]"
												margin_right = 2
											}
											textbox = {
												autoresize = yes
												scale = 0.9
												align = right
												#raw_text = "[Goods.GetMarketPrice|0]"
												text = "[Goods.GetCompareIconAgainstBasePrice( Goods.GetMarketPrice )]"
											}
										}

										onclick = "[InformationPanelBar.OpenGoodsPanel( Market.Self, Goods.Self )]"
										onrightclick = "[RightClickMenuManager.ShowForGoods( Goods.AccessSelf )]"

										tooltipwidget = {
											FancyTooltip_Goods = { }
										}
									}
								}
							}
						}

					}
				}
			}
			blockoverride "onclick" {
				onclick = "[InformationPanelBar.OpenMarketPanel( Market.AccessSelf )]"
			}
			blockoverride "onhover" {
				onmousehierarchyenter = "[AccessHighlightManager.HighlightMarket(Market.Self)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			}
		}

		tiny_flag = {
			parentanchor = vcenter
			position = { -25 0 }
			scale = 0.9
			datacontext = "[Market.GetOwner]"
			onrightclick = "[RightClickMenuManager.ShowForMarket(Market.AccessSelf)]"
			onclick = "[InformationPanelBar.OpenMarketPanel( Market.AccessSelf )]"
		}
	}	
###MARKETS BY AGAMI - ends here

	type outliner_markets = pinnable_outliner_group {
		parentanchor = right
		datacontext = "[Outliner.AccessCategory('markets')]"

		blockoverride "entry_size" {
			size = { 410 30 }
		}

		blockoverride "item" {
			container = {
				block "visibility" {
					visible = yes
				}
				blockoverride "entry_size" {
					size = { 330 30 }
				}

				container = {
					visible = "[Not(OutlinerEntry.IsCategory)]"
					market_item = {
						blockoverride "text_size" {
							minimumsize = { 135 -1 }
							maximumsize = { 135 -1 }
						}
					}
				}
			}
		}
	}

	type state_item = pinnable_outliner_entry {
		datacontext = "[OutlinerEntry.AccessScope.AccessState]"
		
		blockoverride "text_size" {
			minimumsize = { 125 -1 }
			maximumsize = { 125 -1 }
			autoresize=yes
		}

		blockoverride "text" {
		
			textbox = {
				minimumsize = { 120 -1 }
				maximumsize = { 120 -1 }
				autoresize=no
				elide=right
				text = "[State.GetNameNoFormatting]"
				visible = "[GreaterThan_CFixedPoint(State.GetInfrastructureBalance, '(CFixedPoint)0')]"
				
			}
			textbox = {
				text = "#red [State.GetNameNoFormatting]"
				visible = "[Not(GreaterThan_CFixedPoint(State.GetInfrastructureBalance, '(CFixedPoint)0'))]"							
			}
		}
		
		blockoverride "tooltip" {
			tooltipwidget = {
				FancyTooltip_State = {}
			}
		}
		blockoverride "onrightclick" {
			onrightclick = "[RightClickMenuManager.ShowForState(State.AccessSelf)]"
		}
		blockoverride "onhover" {
			onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}	
		

		blockoverride "additional_info" {
			icon = {
					#texture = "gfx/interface/icons/state_status_icons/state_infrastructure.dds"
					#texture = "gfx/interface/icons/production_method_icons/rail_transport.dds"
					texture = "gfx/interface/icons/ai_strategy_icons/unused/infrastructure_expansion.dds"
					size = { 20 20 }
					tooltip = "STATE_INFRASTRUCTURE"
			}
			textbox = {	
				align = right|nobaseline
				autoresize = yes
				margin_right = 10
				minimumsize = { 35 -1 }
				maximumsize = { 35 -1 }			
				text = "[State.GetInfrastructureBalance|*0G]"
				visible = "[GreaterThan_CFixedPoint(State.GetInfrastructureBalance, '(CFixedPoint)0')]"
				tooltip = "STATE_INFRASTRUCTURE_DESC"
			}
			textbox = {
				align = right|nobaseline
				autoresize = yes
				margin_right = 10
				minimumsize = { 35 -1 }
				maximumsize = { 35 -1 }			
				text = "[State.GetInfrastructureBalance|*0R]"
				visible = "[Not(GreaterThan_CFixedPoint(State.GetInfrastructureBalance, '(CFixedPoint)0'))]"
				tooltip = "STATE_INFRASTRUCTURE_DESC"				
			}
			icon = {
					texture = "gfx/interface/icons/state_status_icons/state_tax_capacity.dds"
					size = { 20 20 }
					tooltip = "STATE_TAX_CAPACITY_DESC"
			}
			textbox = {
				align = right|nobaseline
				autoresize = yes
				margin_right = 8
				minimumsize = { 38 -1 }
				maximumsize = { 38 -1 }
				text = "[State.CalcTaxCapacityBalance|*0G]"
				visible = "[GreaterThan_CFixedPoint(State.CalcTaxCapacityBalance, '(CFixedPoint)0')]"
				tooltip = "STATE_TAX_CAPACITY_CONDENSED"
			}
			textbox = {
				align = right|nobaseline
				autoresize = yes
				margin_right = 10
				minimumsize = { 38 -1 }
				maximumsize = { 38 -1 }
				text = "[State.CalcTaxCapacityBalance|*0R]"
				visible = "[Not(GreaterThan_CFixedPoint(State.CalcTaxCapacityBalance, '(CFixedPoint)0'))]"
				tooltip = "STATE_TAX_CAPACITY_CONDENSED"
			}
			textbox = {
				align = right|nobaseline
				autoresize = yes
				margin_right = 10
				minimumsize = { 60 -1 }
				maximumsize = { 60 -1 }
				text = "[State.GetPopulationSize|v*1]"
				tooltip = "TOOLTIP_STATE_POPULATION"
			}

			flowcontainer = {
			visible = "[And(GreaterThan_int32(State.GetNumSubsistenceWorkingAdults, '(int32)0'), EqualTo_int32(State.GetNumUnemployedWorkingAdults, '(int32)0'))]"
				icon = {
						texture = "gfx/interface/icons/pops_icons/peasants.dds"
						size = { 20 20 }
						tooltip = "STATE_PEASANTS"
				}
				textbox = {
					align = right|nobaseline
					autoresize = yes
					margin_right = 8
					minimumsize = { 48 -1 }
					maximumsize = { 48 -1 }
					text = "#![State.GetNumSubsistenceWorkingAdults|*0]"
					tooltip = "STATE_PEASANTS"
				}
			}
			flowcontainer = {
			visible = "[And(GreaterThan_int32(State.GetNumUnemployedWorkingAdults, '(int32)0'), EqualTo_int32(State.GetNumSubsistenceWorkingAdults, '(int32)0'))]"
				icon = {
					texture = "gfx/interface/icons/pops_icons/unemployed.dds"
					size = { 20 20 }
					tooltip = "STATE_UNEMPLOYED"
				}
				textbox = {
					align = right|nobaseline
					autoresize = yes
					minimumsize = { 38 -1 }
					maximumsize = { 38 -1 }
					text = "#![State.GetNumUnemployedWorkingAdults|*0]"
					tooltip = "STATE_UNEMPLOYED"
				}
			}
			flowcontainer = {
			visible = "[And(GreaterThan_int32(State.GetNumSubsistenceWorkingAdults, '(int32)0'), GreaterThan_int32(State.GetNumUnemployedWorkingAdults, '(int32)0'))]"
				icon = {
					texture = "gfx/interface/icons/pops_icons/ootrta_peasants_unemployed.dds"
					size = { 20 20 }
					tooltip = "STATE_UNEMPLOYED"
				}
				textbox = {
					align = right|nobaseline
					autoresize = yes
					minimumsize = { 38 -1 }
					maximumsize = { 38 -1 }
					text = "#![Add_int32(State.GetNumSubsistenceWorkingAdults,State.GetNumUnemployedWorkingAdults)|*0]"
					tooltip = "STATE_AVAILABLE_LABOR"
				}
			}			
		}
		blockoverride "onclick" {
			onclick = "[InformationPanelBar.OpenStatePanel( State.AccessSelf )]"
		}
	}

	type outliner_colonies = pinnable_outliner_group {
		datacontext = "[Outliner.AccessCategory('colonies')]"

		blockoverride "entry_size" {
			size = { 410 30 }
		}

		blockoverride "item" {
			state_item = {
				blockoverride "entry_size" {
					size = { 410 30 }
				}
				blockoverride "text_size" {
					minimumsize = { 225 -1 }
					maximumsize = { 225 -1 }
				}
			}
		}
	}

	type outliner_states = pinnable_outliner_group {
		datacontext = "[Outliner.AccessCategory('states')]"

		blockoverride "entry_size" {
			size = { 410 30 }
		}

		blockoverride "item" {
			container = {
				block "visibility" {
					visible = yes
				}
				
				blockoverride "entry_size" {
					size = { 410 30 }
				}

				container = {
					visible = "[Not(OutlinerEntry.IsCategory)]"
					state_item = {
						blockoverride "text_size" {
							minimumsize = { 225 -1 }
							maximumsize = { 225 -1 }
						}
					}
				}
				pinnable_outliner_group = {
					visible = "[And(OutlinerEntry.IsCategory, OutlinerEntry.IsShown)]"
					blockoverride "entry_size" {
						size = { 410 30 }
					}
					blockoverride "item" {
						state_item = {
							blockoverride "entry_size" {
								size = { 410 30 }
							}
							blockoverride "text_size" {
								minimumsize = { 225 -1 }
								maximumsize = { 225 -1 }
							}
						}
					}
				}
			}
		}
	}
	


	type player_item = flowcontainer {
		flowcontainer = {
			visible = "[Or(Player.IsObserver, Not(Player.HasPlayable))]"
			spacing = 10

			icon_observer = {
				size = { 48 48 }
				widgetanchor = left|vcenter
				parentanchor = left|vcenter
			}

			flowcontainer = {
				direction = vertical
				widgetanchor = left|vcenter
				parentanchor = left|vcenter
				
				textbox = {
					text = "[Player.GetName]"
					align = left|nobaseline
					autoresize = yes
				}
				textbox = {
					visible = "[Player.HasPlayable]"
					text = "[Player.GetPlayedOrObservedCountry.GetNameNoFlag]"
					align = left|nobaseline
					autoresize = yes
				}
			}
		}

		flowcontainer = {
			spacing = 10
			visible = "[And(Not(Player.IsObserver), Player.HasPlayable)]"
			datacontext = "[Player.GetPlayedOrObservedCountry]"
			
			small_flag = {
				widgetanchor = left|vcenter
				parentanchor = left|vcenter
			}
			flowcontainer = {
				direction = vertical
				widgetanchor = left|vcenter
				parentanchor = left|vcenter
				textbox = {
					text = "[Country.GetNameNoFlag]"
					align = left|nobaseline
					autoresize = yes
				}
				textbox = {
					text = "[Country.GetPlayedByDesc]"
					align = left|nobaseline
					maximumsize = { 300 -1 }
					autoresize = yes
					fontsize_min = 14
					elide = right
				}
			}
		}
	}

	type outliner_players = pinnable_outliner_group {
		datacontext = "[Outliner.AccessCategory('players')]"

		blockoverride "entry_size" {
			size = { 410 30 }
		}

		blockoverride "expand_buttons_visibility" {
			# force show expand buttons
			visible = yes
		}

		blockoverride "list_properties" {
			datamodel = "[Outliner.AccessPlayers]"

			item = {
				player_item = {}
			}
		}
	}
}
