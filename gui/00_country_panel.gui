# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 530
@panel_width = 540  				# used to be 460
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types country_panel_types
{
	type country_panel_information_content = flowcontainer {
		margin_top = 10
		minimumsize = { @panel_width_plus_14 -1 }
		using = default_list_position
		direction = vertical
		
		### TOP INFO
		container = {
			parentanchor = hcenter
			minimumsize = { @panel_width_minus_10 -1 }
			maximumsize = { @panel_width_minus_10 -1 }
			
			# FLAG
			widget = {
				position = { 5 0 }
				size = { 340 542 }
				
				icon = {
					size = { 340 542 }
					position = { 3 0 }
					texture = "gfx/interface/flag/fancy_flag_country_view.dds"
				}

				block "clickable" {
					button = {
						using = flag_button_glow
						size = { 230 170 }
						position = { -12 -8 }
						using = tooltip_below
						alpha = 0.2

						tooltipwidget = {
							FancyTooltip_Country = {}
						}
						
						onclick = "[Country.AccessCapital.ZoomToCapital]"
						onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
						block "onhover" {
							onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
							onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
						}
					
						block "sound" {
							using = flag_button_sound
						}
					}
				}
			
				# 3D flag, we want to render at a high resolution and downscale
				# This increases the quality of the rendered gui flag
				# Size can be modified but needs to be 16:9 due to how its rendered (converted 3d object)
				flag_3d = {
					position = { 5 13 }
					size = { 550 309 }	# Rendersize
					scale = 0.45		# Downscale
				}
			}

			#RULER PORTRAIT
			character_portrait_large_torso = {
				datacontext = "[Country.GetRuler]"
				position = { 25 125 }
				blockoverride "show_hat" {}
				blockoverride "highlight" {}
			}
			
			#GOVERNMENT
			flowcontainer = {
				position = { 0 400 }
				direction = vertical
				minimumsize = { 260 -1 }
				margin_top = 10
				spacing = 10
				margin_bottom = 5
				
				using = main_bg

				flowcontainer = {
					margin_left = 10
					spacing = 10
					
					icon = {
						parentanchor = vcenter
						texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
						size = { 40 40 }
					}
					textbox = {
						parentanchor = vcenter
						autoresize = yes
						multiline = yes
						maximumsize = { 200 -1 }
						minimumsize = { 200 -1 }
						text = "COUNTRY_GOVERNMENT"
						align = nobaseline
						elide = right
					}
				}

				dynamicgridbox = {
					datamodel = "[CountryPanel.AccessCountry.AccessInterestGroupsInGovernment]"
					datamodel_wrap = 4
					flipdirection = yes
					
					item = {
						widget = {
							size = { 61 65 }
							
							flowcontainer = {
								parentanchor = hcenter
								direction = vertical
								tooltip = "CLOUT_PIECHART"
								spacing = 2
								
								widget = {
									size = { 33 33 }
									parentanchor = hcenter
									
									ig_button = {
										visible = "[Country.IsPlayer]"
										size = { 100% 100% }
										blockoverride "in_government_icon"{}
									}
									ig_icon = {
										visible = "[Not(Country.IsPlayer)]"
										size = { 100% 100% }
										blockoverride "in_government_icon"{}
									}
								}
								textbox = {
									text = "[InterestGroup.GetClout|%1]"
									autoresize = yes
									parentanchor = hcenter
									align = nobaseline
								}
							}
						}
					}
				}
			}
			
			#MILITARY
			flowcontainer = {
				parentanchor = right
				position = { 0 30 }
				direction = horizontal
				
				mobilization_icon = {
					size = { 60 60 }
					parentanchor = vcenter
				}

				flowcontainer = {
					direction = vertical
					visible = no
					
					textbox = {
						autoresize = yes
						datacontext = "[CountryPanel.GetCountry]"
						visible = "[CountryPanel.GetCountry.IsColonizable]"
						text = "#variable @battalions![Country.CalcConscriptableBattalions|0]#! "
						tooltip = PANEL_MILITARY_NATIVE_POTENTIAL_BATTALIONS_TOOLTIP
						using = fontsize_mega
						minimumsize = { 60 -1 }
						align = right|nobaseline
						parentanchor = right
						margin_left = 10
						margin_right = 5
					}			
					
					textbox = {
						autoresize = yes
						visible = "[Not(CountryPanel.GetCountry.IsColonizable)]"
						text = "@battalions! [Country.GetRegularBattalions|v] + [Country.CalcConscriptableBattalions|v]"
						tooltip = PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP
						using = fontsize_mega
						minimumsize = { 60 -1 }
						align = right|nobaseline
						parentanchor = right
						margin_left = 10
						margin_right = 5
					}

					textbox = {
						autoresize = yes
						visible = "[Not(CountryPanel.GetCountry.IsColonizable)]"
						text = "#variable @flotillas! [Country.GetWarships|0]#!"
						tooltip = PANEL_MILITARY_NAVY_CURRENT_WARSHIPS_TOOLTIP
						using = fontsize_mega
						minimumsize = { 60 -1 }
						align = right|nobaseline
						parentanchor = right
						margin_left = 10
						margin_right = 5
					}
				}
			}

			#ROWS OF STATS
			flowcontainer = {
				spacing =  1
				direction =  vertical
				parentanchor = right
				position = { 0 11 }

				country_stats_entry = {	
					blockoverride "stats_tooltip" {
						tooltip = "[Country.GetRankTooltip]"
					}
					blockoverride "no_icon" {
						rank_badge = {
							size = { 50 50 }
							parentanchor = right|vcenter
							
							blockoverride "datacontext " {}

							blockoverride "rank_text" {
								text = "#BOLD [Country.GetCountryScorePositionDesc]"
							}
							blockoverride "rank_text_2" {
								text = "#BOLD [Country.GetCountryScorePositionDesc]"
								visible = no
							}
						}
					}
					blockoverride "information_icon" {
						texture = "gfx/interface/icons/generic_icons/gdp.dds"
					}
					blockoverride "stats_label" {
						text = "[concept_rank]"
					}
					blockoverride "stats_value" {
						text = "#v [Country.GetRank]#!"
					}

					blockoverride "textsize" {
						size = { 300 20 }
					}
				}

				#BATTALIONS
				country_stats_entry = {	
					visible = "[Not(CountryPanel.GetCountry.IsColonizable)]"
					alpha = "[TransparentIfZero_int32(Country.GetBattalions)]"
				
					blockoverride "stats_tooltip" {
						tooltip = PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP
					}
					blockoverride "information_icon" {
						texture = "gfx/interface/icons/generic_icons/battalions.dds"
					}
					blockoverride "stats_label" {
						text = "BATTALIONS"
					}
					blockoverride "stats_value" {
						text = "[Country.GetRegularBattalions|v] + [Country.CalcConscriptableBattalions|v]"
					}
				}

				#BATTALIONS (COLONIZABLE)
				country_stats_entry = {	
					visible = "[CountryPanel.GetCountry.IsColonizable]"
					alpha = "[TransparentIfZero_int32(Country.CalcConscriptableBattalions)]"
				
					blockoverride "stats_tooltip" {
						tooltip = PANEL_MILITARY_NATIVE_POTENTIAL_BATTALIONS_TOOLTIP
					}
					blockoverride "information_icon" {
						texture = "gfx/interface/icons/generic_icons/battalions.dds"
					}
					blockoverride "stats_label" {
						text = "BATTALIONS"
					}
					blockoverride "stats_value" {
						text = "#variable [Country.CalcConscriptableBattalions]#!"
					}
				}

				#FLOTTILAS
				country_stats_entry = {
					alpha = "[TransparentIfZero_int32(Country.GetWarships)]"
					blockoverride "stats_tooltip" {
						tooltip = PANEL_MILITARY_NAVY_CURRENT_WARSHIPS_TOOLTIP
					}
					blockoverride "information_icon" {
						texture = "gfx/interface/icons/generic_icons/flotillas.dds"
					}
					blockoverride "stats_label" {
						text = "WARSHIPS"
					}
					blockoverride "stats_value" {
						text = "#variable [Country.GetWarships|0]#!"
					}
				}

				#GDP
				country_stats_entry = {	
					blockoverride "stats_tooltip" {
						using = GDP_tooltip_with_graph
					}
					blockoverride "information_icon" {
						texture = "gfx/interface/icons/generic_icons/gdp.dds"
					}
					blockoverride "stats_label" {
						text = "COUNTRY_GDP_ONE_LINE"
					}
					blockoverride "stats_value" {
						text = "#v @money![Country.GetGDP|D]#!"
					}
				}

				##POPULATION
				country_stats_entry = {
					blockoverride "stats_tooltip" {
						using = population_tooltip_with_graph
					}
					blockoverride "information_icon" {
						texture = "gfx/interface/icons/generic_icons/population.dds"
					}
					blockoverride "stats_label" {
						text = "COUNTRY_POPULATION_ONE_LINE"
					}
					blockoverride "stats_value" {
						text = "#v [Country.GetTotalPopulation|D]#!"
					}
				}				

				##LITERACY
				country_stats_entry = {
					blockoverride "stats_tooltip" {
						tooltip = "LITERACY_TOOLTIP"
					}
					blockoverride "information_icon" {
						texture = "gfx/interface/icons/generic_icons/literacy.dds"
					}
					blockoverride "stats_label" {
						text = "COUNTRY_LITERACY_ONE_LINE"
					}
					blockoverride "stats_value" {
						text = "#v [Country.GetIncorporatedLiteracyRate|%1]#!"
					}
				}

				##STANDARD OF LIVING
				country_stats_entry = {
					blockoverride "stats_tooltip" {
						using = average_standard_of_living_tooltip_with_graph
					}

					blockoverride "stats_label" {
						text = "COUNTRY_SOL_ONE_LINE"
					}
					
					blockoverride "no_icon" {}
					
					#icon hack
					widget = {
						position = { -10 0 }
						parentanchor = right|vcenter
						size = { 35 30 }
						scissor = yes
						
						textbox = {
							size = { 100 30 }
							elide = right
							align = nobaseline
							position = { 0 0 }
							fontsize = 29
							text = "[LabelingHelper.GetIconForStandardOfLivingCFixedPoint(Country.GetAverageSoLByPopulation)|v] ([Country.GetAverageSoLByPopulation|v])"
						}
					}
					
					blockoverride "stats_value" {
						text = "[LabelingHelper.GetLabelForStandardOfLivingNoIconCFixedPoint(Country.GetAverageSoLByPopulation)|v] ([Country.GetAverageSoLByPopulation|v1])"
					}
				}

				##RELIGION
				country_stats_entry = {
					blockoverride "stats_tooltip" {}

					blockoverride "information_icon" {
						texture = "[Country.GetStateReligion.GetTexture]"
					}
					blockoverride "stats_label" {
						text = "COUNTRY_RELIGIONS_ONE_LINE"
					}
					blockoverride "stats_value" {
						text = "#v [Country.GetStateReligion.GetName]#!"
					}
				}
				
				##CULTURE
				country_stats_entry = {
					blockoverride "stats_tooltip" {}

					blockoverride "information_icon" {
						texture = "gfx/interface/population/pop_culture.dds"
					}
					blockoverride "stats_label" {
						text = "COUNTRY_CULTURES_ONE_LINE"
					}
					blockoverride "stats_value" {
						text = "#v [Country.GetPrimaryCulturesDesc]#!"
					}
				}
				}
			}
		
		widget = {
			visible = "[IsDataModelEmpty(Country.GetTimedModifiers)]"
			size = { 10 10 }
		}

		### TIMED MODIFIERS
		flowcontainer = {
			margin_top = 10
			margin_right = 14
			margin_left = 14
			margin_bottom = 5
			datamodel = "[Country.GetTimedModifiers]"
			spacing = 5
			visible = "[Not(IsDataModelEmpty(Country.GetTimedModifiers))]"
			maximumsize = { @panel_width_minus_10 45 }
			parentanchor = right
			datamodel_wrap = 2

			item = {
				icon = {
					tooltip = "[TimedModifier.GetTooltip]"
					texture = "[TimedModifier.GetIcon]"
					size = { 25 25 }
				}
			}
		}

		widget = {
			size = { 10 10 }
		}
		
		#ATTITUDE / INFAMY
		attitude_info = {}		

		#AI STRATEGIES
		flowcontainer = {
			minimumsize = { @panel_width -1 }
			visible = "[And(Not(CountryPanel.GetCountry.IsPlayer),Not(CountryPanel.GetCountry.IsColonizable))]"
			direction = vertical
			margin = { 0 10 }
			
			default_header = {
				blockoverride "text" {
					text = "AI_STRATEGIES"
				}
			}

			widget = {
				size = { @panel_width 140 }
				parentanchor = hcenter
				
				hbox = {
					datamodel = "[CountryPanel.AccessCountry.AccessStrategies]"
					
					#GRIDITEM
					item = {
						widget = {
							tooltip = "[AIStrategy.GetTooltip(CountryPanel.GetCountry)]"
							size = { 140 140 }

							container = {
								parentanchor = hcenter
								
								icon = {
									size = { 105 105 }
									texture = "gfx/interface/backgrounds/round_frame_dec.dds"
								}
								icon = {
									size = { 65 65 }
									texture = "[AIStrategy.GetTexture]"
									parentanchor = center
									position = { 0 -3 }
								}
							}

							textbox = {
								parentanchor = bottom|hcenter
								autoresize = yes
								minimumsize = { 145 50 }
								maximumsize = { 145 75 }
								text = "[AIStrategy.GetName|v]"
								multiline = yes
								align = center|nobaseline
								margin = { 5 2 }
								elide = right
								
								background = {
									using = entry_bg_simple
								}
							}
						}
					}
				}
			}
		}

		#IG LEADERS
		flowcontainer = {
			minimumsize = { @panel_width -1 }
			direction = vertical
			margin = { 0 10 }
			spacing = 10
			
			default_header = {
				blockoverride "text" {
					text = "INTEREST_GROUPS"
				}
			}

			dynamicgridbox = {
				parentanchor = top|hcenter
				datamodel = "[CountryPanel.AccessCountry.AccessAllInterestGroups]"
				flipdirection = yes
				datamodel_wrap = 2

				item = {
					visual_leaders_item = {}
				}
			}
		}
	}	
}
