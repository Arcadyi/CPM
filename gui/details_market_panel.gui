# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types market_panel
{
	type market_panel_details_content = container {
		parentanchor = hcenter
		
		flowcontainer = {
			direction = vertical
			using = default_list_position
			### ----
			#margin_top = 10
			#margin_bottom = 20
			### ++++
			margin_top = 10
			margin_bottom = 0
			### ====

			flowcontainer = {
				using = default_list_position
				direction = vertical

				### LIST
				flowcontainer = {
					direction = vertical
					
					goods_filters = {}

					widget = { size = { 5 10 }}

					flowcontainer = {
						using = default_list_position
						### ----
						#margin = { 0 5 }
						### ++++
						margin = { 0 1 }
						### ====
						
						sort_button = {
							### ----
							#size = { 60 20 }
							### ++++
							size = { 42 20 }
							### ====
							tooltip = "SORT_BY_MARKET_GOODS"
							onclick = "[Market.Sort('name')]"
							onclick = "[Market.RestoreSort]"
							button = {
								texture = "gfx/interface/buttons/sort_button_icons/sort_icon_good.dds"
								size = { 25 25 }
								parentanchor = center
								alwaystransparent = yes
							}
						}

						sort_button = {
							name = "tutorial_highlight_market_details_panel_sell_orders"
							align = hcenter|nobaseline
							### ----
							#text = "[concept_sell_orders]"
							#size = { 100 20 }
							### ++++
							text = "CONCEPT_SELL_ORDER_SHORT_MOD"
							size = { 75 20 }
							### ====
							onclick = "[Market.Sort('sell')]"
							onclick = "[Market.RestoreSort]"
						}

						sort_button = {
							name = "tutorial_highlight_market_details_panel_buy_orders"
							align = hcenter|nobaseline
							### ----
							#text = "[concept_buy_orders]"
							#size = { 100 20 }
							### ++++
							text = "CONCEPT_BUY_ORDER_SHORT_MOD"
							size = { 75 20 }
							### ====
							onclick = "[Market.Sort('buy')]"
							onclick = "[Market.RestoreSort]"
							margin_right = 7
						}

						sort_button = {
							align = hcenter|nobaseline
							text = "BALANCE"
							### ----
							#size = { 90 20 }
							### ++++
							size = { 82 20 }
							### ====
							onclick = "[Market.Sort('balance')]"
							onclick = "[Market.RestoreSort]"
							margin_right = 7
							tooltip = "SORT_BY_BALANCE_TOOLTIP"
						}
						
						sort_button = {
							align = hcenter|nobaseline
							text = "[concept_market_price]"
							### ----
							#size = { 190 20 }
							### ++++
							size = { 153 20 }
							### ====
							onclick = "[Market.Sort('price')]"
							onclick = "[Market.RestoreSort]"
						}
						
						### ++++
						sort_button = {
							align = hcenter|nobaseline
							text = "CONCEPT_MARKET_GOOD_POLICY_SHORT_MOD"
							size = { 113 20 }
						}
						### ====
					}
				}
			}

			flowcontainer = {
				using = default_list_position
				direction = vertical
				spacing = 20
				
				flowcontainer = {
					name = "tutorial_highlight_market_details_panel_all_goods"
					direction = vertical
					datamodel = "[Market.AccessAllGoods( MarketPanel.GetFilters )]"
					### ----
					#spacing = 5
					### ++++
					spacing = 1
					### ====
					
					item = {
						goods_entry_button = {}
					}
				}
				
				textbox = {
					parentanchor = hcenter
					minimumsize = { 450 -1 }
					autoresize = yes
					multiline = yes
					margin = { 0 10 }
					align = center|nobaseline
					visible = "[And(InDebugMode, Not(StringIsEmpty(Market.GetModifierDesc)))]"
					text = "[Market.GetModifierDesc]"
					
					background = {
						using = entry_bg
					}
				}
			}
		}
		not_yet_initialized = {
			visible = "[EqualTo_CFixedPoint(Market.GetBalance, '(CFixedPoint)0')]"
		}
	}
	
	type goods_entry_button = button {
		### ----
		#size = { @panel_width 50 }
		### ++++
		size = { @panel_width 42 }
		### ====
		using = default_button
		onclick = "[InformationPanelBar.OpenGoodsPanel(Goods.GetMarket, Goods.Self)]"
		using = select_button_sound
		onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"

		block "tooltip" {
		}

		flowcontainer = {
			parentanchor = left|vcenter
			widgetanchor = left|vcenter
			
			using = goods_list_item
			
			textbox = {
				align = right|nobaseline
				visible = "[GreaterThan_CFixedPoint(Goods.GetMarketSellOrders, '(CFixedPoint)0')]"
				text = "[Goods.GetMarketSellOrdersWithTooltip]"
				### ----
				#size = { 105 40 }
				#margin_right = 10
				### ++++
				size = { 75 40 }
				margin_right = 7
				### ====
				parentanchor = vcenter
			}

			textbox = {
				align = right|nobaseline
				visible = "[Not(GreaterThan_CFixedPoint(Goods.GetMarketSellOrders, '(CFixedPoint)0'))]"
				text = "-"
				alpha = 0.5
				### ----
				#size = { 105 40 }
				#margin_right = 10
				### ++++
				size = { 75 40 }
				margin_right = 7
				### ====
				parentanchor = vcenter
			}

			vertical_divider = {}
			
			textbox = {
				align = right|nobaseline
				visible = "[GreaterThan_CFixedPoint(Goods.GetMarketBuyOrders, '(CFixedPoint)0')]"
				text = "[Goods.GetMarketBuyOrdersWithTooltip]"
				### ----
				#size = { 100 40 }
				#margin_right = 10
				### ++++
				size = { 75 40 }
				margin_right = 7
				### ====
				parentanchor = vcenter
			}

			textbox = {
				align = right|nobaseline
				visible = "[Not(GreaterThan_CFixedPoint(Goods.GetMarketBuyOrders, '(CFixedPoint)0'))]"
				text = "-"
				alpha = 0.5
				### ----
				#size = { 100 40 }
				#margin_right = 10
				### ++++
				size = { 75 40 }
				margin_right = 7
				### ====
				parentanchor = vcenter
			}

			vertical_divider = {}
			
			flowcontainer = {
				direction = vertical
				### ----
				#minimumsize = { 90 52 }
				#margin_top = 10
				#spacing = 5
				### ++++
				minimumsize = { 82 44 }
				margin_top = 3
				spacing = 2
				### ====
				tooltip = "MARKET_GOODS_BALANCE_TOOLTIP"

				textbox = {
					visible = "[GreaterThan_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
					align = right|nobaseline
					text = "MARKET_PANEL_BALANCE_GOLD"
					autoresize = yes
					### ----
					#margin_right = 15
					### ++++
					margin_right = 8
					### ====
					parentanchor = right
				}

				textbox = {
					visible = "[EqualTo_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
					align = hcenter|nobaseline
					text = "MARKET_PANEL_BALANCE"
					autoresize = yes
					parentanchor = hcenter
				}

				textbox = {
					visible = "[LessThan_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
					align = left|nobaseline
					text = "MARKET_PANEL_BALANCE_BLUE"
					autoresize = yes
					### ----
					#margin_left = 15
					### ++++
					margin_left = 6
					### ====
					parentanchor = left
				}

				double_direction_progressbar_gold = {
					size = { 60 6 }
					parentanchor = hcenter

					blockoverride "negative_min_max_values" {
						min = "[Negate_float(FixedPointToFloat(MarketPanel.GetMaxImbalanceScaledByBasePrice))]"
						max = 0
					}

					blockoverride "positive_min_max_values" {
						min = 0
						max = "[FixedPointToFloat(MarketPanel.GetMaxImbalanceScaledByBasePrice)]"
					}
					
					blockoverride "value_left" {
						value = "[FixedPointToInt(Multiply_CFixedPoint(Goods.GetMarketBuyAndSellOrdersBalance, Goods.GetBasePrice))]"
					}
					blockoverride "value_right" {
						value = "[FixedPointToInt(Multiply_CFixedPoint(Goods.GetMarketBuyAndSellOrdersBalance, Goods.GetBasePrice))]"
					}
				}
			}

			vertical_divider = {}
			
			widget = {
				using = market_price_tooltip_with_graph
				### ----
				#size = { 190 55 }
				### ++++
				size = { 153 44 }
				### ====
				
				textbox = {
					align = right|nobaseline
					text = "@money![Goods.GetMarketPrice|0v] [Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetMarketPrice )]"
					### ----
					#size = { 110 40 }
					#margin_right = 10
					### ++++
					size = { 153 40 }
					margin_right = 78
					### ====
					parentanchor = vcenter
				}

				flowcontainer = {
					direction = vertical
					### ----
					#minimumsize = { 80 52 }
					#spacing = 5
					#margin_top = 10
					### ++++
					minimumsize = { 76 44 }
					spacing = 2
					margin_top = 3
					### ====
					parentanchor = right

					textbox = {
						visible = "[GreaterThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice), '(CFixedPoint)0.01')]"
						align = right|nobaseline
						text = "MARKET_PANEL_GOODS_PRICE_GOLD"
						autoresize = yes
						### ----
						#margin_right = 10
						### ++++
						margin_right = 8
						### ====
						parentanchor = right
					}

					textbox = {
						visible = "[And( Not(LessThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice), '(CFixedPoint)-0.01')), Not(GreaterThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice), '(CFixedPoint)0.01')))]"
						align = hcenter|nobaseline
						text = "MARKET_PANEL_GOODS_PRICE"
						autoresize = yes
						parentanchor = hcenter
					}

					textbox = {
						visible = "[LessThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice), '(CFixedPoint)-0.01')]"
						align = left|nobaseline
						text = "MARKET_PANEL_GOODS_PRICE_BLUE"
						autoresize = yes
						### ----
						#margin_left = 10
						### ++++
						margin_left = 8
						### ====
						parentanchor = left
					}

					double_direction_progressbar_gold = {
						size = { 60 6 }
						parentanchor = hcenter

						blockoverride "negative_min_max_values" {
							min = -0.75
							max = 0
						}

						blockoverride "positive_min_max_values" {
							min = 0
							max = 0.75
						}
						
						blockoverride "value_left" {
							value = "[FixedPointToFloat(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice))]"
						}
						blockoverride "value_right" {
							value = "[FixedPointToFloat(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice))]"
						}
					}
				}
			}
			### ++++
			vertical_divider = {}
			widget = {
				size = { 113 42 }
				parentanchor = vcenter
				flowcontainer = {
					margin_left = 2
					visible = "[Goods.IsTradeable]"
					parentanchor = vcenter
					### from gui/budget_panel.gui
					### prio import
					set_level_bar_item = {
						### ++++
						size = { 36 38 }
						### ====
						tooltip = "[SelectLocalization(Goods.GetMarket.GetOwner.IsPlayer, GetPlayer.GetGoodsTariffDescImportPriority(Goods.Self), 'NOT_PLAYER_MARKET_PRIORITY')]"
						
						blockoverride "button_texture" {
							texture = "gfx/interface/icons/trade_icons/import_focused.dds"
						}
						blockoverride "click" {
							enabled = "[And(IsValid( GetPlayer.SetGoodsTariffImportPriority(Goods.Self) ), Goods.GetMarket.GetOwner.IsPlayer)]"
							onclick = "[Execute( GetPlayer.SetGoodsTariffImportPriority(Goods.Self) )]"
						}
						blockoverride "setvisible" {
							visible = "[Not(IsValid( GetPlayer.SetGoodsTariffImportPriority(Goods.Self) ))]"
						}
						blockoverride "setvisible_2" {
							visible = "[IsValid( GetPlayer.SetGoodsTariffImportPriority(Goods.Self) )]"
						}
					}
					### no prio
					set_level_bar_item = {
						### ++++
						size = { 36 38 }
						### ====
						tooltip = "[SelectLocalization(Goods.GetMarket.GetOwner.IsPlayer, GetPlayer.GetGoodsTariffDescNoPriority(Goods.Self), 'NOT_PLAYER_MARKET_PRIORITY')]"
						
						blockoverride "button_texture" {
							texture = "gfx/interface/icons/trade_icons/unfocused.dds"
						}
						blockoverride "click" {
							enabled = "[And(IsValid( GetPlayer.SetGoodsTariffNoPriority(Goods.Self) ), Goods.GetMarket.GetOwner.IsPlayer)]"
							onclick = "[Execute( GetPlayer.SetGoodsTariffNoPriority(Goods.Self) )]"
						}
						blockoverride "setvisible" {
							visible = "[Not(IsValid( GetPlayer.SetGoodsTariffNoPriority(Goods.Self) ))]"
						}
						blockoverride "setvisible_2" {
							visible = "[IsValid( GetPlayer.SetGoodsTariffNoPriority(Goods.Self) )]"
						}
					}
					### prio export
					set_level_bar_item = {
						### ++++
						size = { 36 38 }
						### ====
						tooltip = "[SelectLocalization(Goods.GetMarket.GetOwner.IsPlayer, GetPlayer.GetGoodsTariffDescExportPriority(Goods.Self), 'NOT_PLAYER_MARKET_PRIORITY')]"
						
						blockoverride "button_texture" {
							texture = "gfx/interface/icons/trade_icons/export_focused.dds"
						}
						blockoverride "click" {
							enabled = "[And(IsValid( GetPlayer.SetGoodsTariffExportPriority(Goods.Self) ), Goods.GetMarket.GetOwner.IsPlayer)]"
							onclick = "[Execute( GetPlayer.SetGoodsTariffExportPriority(Goods.Self) )]"
						}
						blockoverride "setvisible" {
							visible = "[Not(IsValid( GetPlayer.SetGoodsTariffExportPriority(Goods.Self) ))]"
						}
						blockoverride "setvisible_2" {
							visible = "[IsValid( GetPlayer.SetGoodsTariffExportPriority(Goods.Self) )]"
						}
					}
				}
			}
			### ====
		}
	}
}

template goods_list_item {
	widget = {
		### ----
		#size = { 55 55 }
		### ++++
		size = { 42 42 }
		### ====
		block "goods_list_item_datacontext" {}
		parentanchor = vcenter

		tooltipwidget = {
			FancyTooltip_Goods = {}
		}
		
		icon = {
			texture = "gfx/interface/market_view/trade_good_list_bg.dds"
			### ----
			#position = { 25 0 }
			#size = { 190 46 }
			### ++++
			position = { 20 0 }
			size = { 190 38 }
			### ====
			parentanchor = vcenter
			color = "[Goods.GetCategoryColor]"
		}

		icon = {
			texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
			### ----
			#size = { 55 55 }
			### ++++
			size = { 42 42 }
			### ====
			color = "[Goods.GetCategoryColor]"
			
			icon = {
				texture = "[Goods.GetTexture]"
				size = { 40 40 }
				parentanchor = center
			}
			icon = {
				size = { 25 25 }
				visible = "[Goods.HasGoodsShortage]"
				texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
				tooltip = "GOODS_SHORTAGE_TOOLTIP"
				parentanchor = bottom
			}
		}
	}
}
